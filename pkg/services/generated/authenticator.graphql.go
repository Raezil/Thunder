// Code generated by proroc-gen-graphql, DO NOT EDIT.
package generated

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_RegisterRequest   *graphql.Object      // message RegisterRequest in authenticator.proto
	gql__type_RegisterReply     *graphql.Object      // message RegisterReply in authenticator.proto
	gql__type_ProtectedRequest  *graphql.Object      // message ProtectedRequest in authenticator.proto
	gql__type_ProtectedReply    *graphql.Object      // message ProtectedReply in authenticator.proto
	gql__type_LoginRequest      *graphql.Object      // message LoginRequest in authenticator.proto
	gql__type_LoginReply        *graphql.Object      // message LoginReply in authenticator.proto
	gql__input_RegisterRequest  *graphql.InputObject // message RegisterRequest in authenticator.proto
	gql__input_RegisterReply    *graphql.InputObject // message RegisterReply in authenticator.proto
	gql__input_ProtectedRequest *graphql.InputObject // message ProtectedRequest in authenticator.proto
	gql__input_ProtectedReply   *graphql.InputObject // message ProtectedReply in authenticator.proto
	gql__input_LoginRequest     *graphql.InputObject // message LoginRequest in authenticator.proto
	gql__input_LoginReply       *graphql.InputObject // message LoginReply in authenticator.proto
)

func Gql__type_RegisterRequest() *graphql.Object {
	if gql__type_RegisterRequest == nil {
		gql__type_RegisterRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Generated_Type_RegisterRequest",
			Fields: graphql.Fields{
				"email": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"password": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"name": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"surname": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"age": &graphql.Field{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
		})
	}
	return gql__type_RegisterRequest
}

func Gql__type_RegisterReply() *graphql.Object {
	if gql__type_RegisterReply == nil {
		gql__type_RegisterReply = graphql.NewObject(graphql.ObjectConfig{
			Name: "Generated_Type_RegisterReply",
			Fields: graphql.Fields{
				"reply": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_RegisterReply
}

func Gql__type_ProtectedRequest() *graphql.Object {
	if gql__type_ProtectedRequest == nil {
		gql__type_ProtectedRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Generated_Type_ProtectedRequest",
			Fields: graphql.Fields{
				"text": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_ProtectedRequest
}

func Gql__type_ProtectedReply() *graphql.Object {
	if gql__type_ProtectedReply == nil {
		gql__type_ProtectedReply = graphql.NewObject(graphql.ObjectConfig{
			Name: "Generated_Type_ProtectedReply",
			Fields: graphql.Fields{
				"result": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_ProtectedReply
}

func Gql__type_LoginRequest() *graphql.Object {
	if gql__type_LoginRequest == nil {
		gql__type_LoginRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Generated_Type_LoginRequest",
			Fields: graphql.Fields{
				"email": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
				"password": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_LoginRequest
}

func Gql__type_LoginReply() *graphql.Object {
	if gql__type_LoginReply == nil {
		gql__type_LoginReply = graphql.NewObject(graphql.ObjectConfig{
			Name: "Generated_Type_LoginReply",
			Fields: graphql.Fields{
				"token": &graphql.Field{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__type_LoginReply
}

func Gql__input_RegisterRequest() *graphql.InputObject {
	if gql__input_RegisterRequest == nil {
		gql__input_RegisterRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Generated_Input_RegisterRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"email": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"password": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"name": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"surname": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"age": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
		})
	}
	return gql__input_RegisterRequest
}

func Gql__input_RegisterReply() *graphql.InputObject {
	if gql__input_RegisterReply == nil {
		gql__input_RegisterReply = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Generated_Input_RegisterReply",
			Fields: graphql.InputObjectConfigFieldMap{
				"reply": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_RegisterReply
}

func Gql__input_ProtectedRequest() *graphql.InputObject {
	if gql__input_ProtectedRequest == nil {
		gql__input_ProtectedRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Generated_Input_ProtectedRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"text": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_ProtectedRequest
}

func Gql__input_ProtectedReply() *graphql.InputObject {
	if gql__input_ProtectedReply == nil {
		gql__input_ProtectedReply = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Generated_Input_ProtectedReply",
			Fields: graphql.InputObjectConfigFieldMap{
				"result": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_ProtectedReply
}

func Gql__input_LoginRequest() *graphql.InputObject {
	if gql__input_LoginRequest == nil {
		gql__input_LoginRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Generated_Input_LoginRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"email": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
				"password": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_LoginRequest
}

func Gql__input_LoginReply() *graphql.InputObject {
	if gql__input_LoginReply == nil {
		gql__input_LoginReply = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Generated_Input_LoginReply",
			Fields: graphql.InputObjectConfigFieldMap{
				"token": &graphql.InputObjectFieldConfig{
					Type: graphql.NewNonNull(graphql.String),
				},
			},
		})
	}
	return gql__input_LoginReply
}

// graphql__resolver_Auth is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_Auth struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_Auth creates pointer of service struct
func new_graphql_resolver_Auth(conn *grpc.ClientConn) *graphql__resolver_Auth {
	return &graphql__resolver_Auth{
		conn: conn,
		host: "localhost:8080",
		dialOptions: []grpc.DialOption{
			grpc.WithInsecure(),
		},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_Auth) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_Auth) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"login": &graphql.Field{
			Type: Gql__type_LoginReply(),
			Args: graphql.FieldConfigArgument{
				"email": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
				"password": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req LoginRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for login")
				}
				client := NewAuthClient(conn)
				resp, err := client.Login(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC Login")
				}
				return resp, nil
			},
		},
		"register": &graphql.Field{
			Type: Gql__type_ProtectedReply(),
			Args: graphql.FieldConfigArgument{
				"text": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req ProtectedRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for register")
				}
				client := NewAuthClient(conn)
				resp, err := client.SampleProtected(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC SampleProtected")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_Auth) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"register": &graphql.Field{
			Type: Gql__type_RegisterReply(),
			Args: graphql.FieldConfigArgument{
				"email": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
				"password": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
				"name": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
				"surname": &graphql.ArgumentConfig{
					Type:         graphql.NewNonNull(graphql.String),
					DefaultValue: "",
				},
				"age": &graphql.ArgumentConfig{
					Type: graphql.NewNonNull(graphql.Int),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req RegisterRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for register")
				}
				client := NewAuthClient(conn)
				resp, err := client.Register(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC Register")
				}
				return resp, nil
			},
		},
	}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterAuthGraphqlHandler with *grpc.ClientConn manually.
func RegisterAuthGraphql(mux *runtime.ServeMux) error {
	return RegisterAuthGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
//	service Auth {
//	   option (graphql.service) = {
//	       host: "host:port"
//	       insecure: true or false
//	   };
//
//	   ...with RPC definitions
//	}
func RegisterAuthGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_Auth(conn))
}
